package com.bakdata.conquery.sql.conversion.forms;

import java.sql.Date;

import com.bakdata.conquery.apiv1.query.concept.specific.temporal.TemporalSamplerFactory;
import com.bakdata.conquery.models.forms.managed.AbsoluteFormQuery;
import com.bakdata.conquery.models.forms.managed.EntityDateQuery;
import com.bakdata.conquery.sql.conversion.SharedAliases;
import org.jooq.Field;
import org.jooq.impl.DSL;

/**
 * Constant fields used for absolute and relative date stratification. See this modules README for more detailed information.
 */
class FormConstants {

	/**
	 * The index date from which an absolute stratification for an entity starts. It is the lowest date bound of an absolute stratification.
	 */
	public static Field<Date> INDEX_START = DSL.field(DSL.name(SharedAliases.INDEX_START.getAlias()), Date.class);

	/**
	 * The quarter start of the lower bound of an absolute stratification range. The stratification range this date is referring to can be an
	 * {@link AbsoluteFormQuery#getDateRange()} or for an {@link EntityDateQuery} the respective entities date range bound by the
	 * {@link EntityDateQuery#getDateRange()}.
	 */
	public static Field<Date> QUARTER_START = DSL.field(DSL.name(SharedAliases.QUARTER_START.getAlias()), Date.class);

	/**
	 * The exclusive quarter end of the upper bound of an absolute stratification range. The stratification range this date is referring to can be an
	 * {@link AbsoluteFormQuery#getDateRange()} or for an {@link EntityDateQuery} the respective entities date range bound by the
	 * {@link EntityDateQuery#getDateRange()}.
	 */
	public static Field<Date> QUARTER_END = DSL.field(DSL.name(SharedAliases.QUARTER_END.getAlias()), Date.class);

	/**
	 * The year-start of the lower bound of an absolute stratification range. The stratification range this date is referring to can be an
	 * {@link AbsoluteFormQuery#getDateRange()} or for an {@link EntityDateQuery} the respective entities date range bound by the
	 * {@link EntityDateQuery#getDateRange()}.
	 */
	public static Field<Date> YEAR_START = DSL.field(DSL.name(SharedAliases.YEAR_START.getAlias()), Date.class);

	/**
	 * The year-end of the upper bound of an absolute stratification range. The stratification range this date is referring to can be an
	 * {@link AbsoluteFormQuery#getDateRange()} or for an {@link EntityDateQuery} the respective entities date range bound by the
	 * {@link EntityDateQuery#getDateRange()}.
	 */
	public static Field<Date> YEAR_END = DSL.field(DSL.name(SharedAliases.YEAR_END.getAlias()), Date.class);

	/**
	 * The year-end of the upper bound of an absolute stratification range, but aligned on the quarter start of the lower bound. The stratification range this
	 * date is referring to can be an {@link AbsoluteFormQuery#getDateRange()} or for an {@link EntityDateQuery} the respective entities date range bound by
	 * the {@link EntityDateQuery#getDateRange()}.
	 */
	public static Field<Date> YEAR_END_QUARTER_ALIGNED = DSL.field(DSL.name(SharedAliases.YEAR_END_QUARTER_ALIGNED.getAlias()), Date.class);

	/**
	 * The amount times an interval added to a date, aligned on a year.
	 */
	public static Field<Integer> YEAR_ALIGNED_COUNT = DSL.field(DSL.name(SharedAliases.YEAR_ALIGNED_COUNT.getAlias()), Integer.class);

	/**
	 * The amount times an interval added to a date, aligned on a quarter.
	 */
	public static Field<Integer> QUARTER_ALIGNED_COUNT = DSL.field(DSL.name(SharedAliases.QUARTER_ALIGNED_COUNT.getAlias()), Integer.class);

	/**
	 * The amount times an interval added to a date, aligned a day.
	 */
	public static Field<Integer> DAY_ALIGNED_COUNT = DSL.field(DSL.name(SharedAliases.DAY_ALIGNED_COUNT.getAlias()), Integer.class);

	/**
	 * The int field generated by a generate_series SQL set-returning function.
	 */
	public static Field<Integer> SERIES_INDEX = DSL.field(DSL.name(SharedAliases.SERIES_INDEX.getAlias()), Integer.class);

}
